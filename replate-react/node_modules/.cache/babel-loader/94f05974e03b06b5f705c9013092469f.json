{"ast":null,"code":"import _slicedToArray from \"/Users/user/Desktop/Lambda/Replate-React/replate-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/user/Desktop/Lambda/Replate-React/replate-react/src/Components/CreateAccount.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\"; // function validatePhone(value){\n//     let error;\n//     if(!value) {\n//         error=\"Required field\";\n//     } else if (!/^[2-9]\\d{2}-\\d{3}-\\d{4}$/i.test(value)) {\n//         error=\"Enter phone in the following format: xxx-xxx-xxxx\";\n//     }\n//     return error;\n// }\n\nconst UserType = ({\n  values,\n  status\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        type = _useState2[0],\n        setType = _useState2[1]; //sets\n\n\n  useEffect(() => {\n    if (status) {\n      setType([type, status]);\n    }\n  }, [type, status]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"I am a\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Volunteer\"), React.createElement(Field, {\n    type: \"radio\",\n    name: \"volunteerUser\",\n    selected: type.businessUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Business\"), React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"businessUser\",\n    checked: type.businessUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })))));\n};\n\nconst FormikUserType = withFormik({\n  mapPropsToValues({\n    volunteerUser,\n    businessUser\n  }) {\n    return {\n      volunteerUser: volunteerUser || true,\n      businessUser: businessUser || false\n    };\n  } //   validationSchema: Yup.object().shape({\n  //     firstName: Yup.string().required(\"*Required field\"),\n  //     lastName: Yup.string().required(\"*Required field\"),\n  //     phone: Yup.string().required(\"*Required field\"),\n  //     email: Yup.string()\n  //       .email(\"Invalid email\")\n  //       .required(\"*Required field\"),\n  //     password: Yup.string().required(\"*Required field\"),\n  //     confirmPassword: Yup.string().required(\"*Required field\")\n  //   }),\n  //   handleChange(values, { setStatus }) {\n  //     axios\n  //       .post(\"https://reqres.in/api/users\", values)\n  //       .then(res => {\n  //         setStatus(res.data);\n  //         console.log(\"VolOnboardForm POST request success:\", res);\n  //       })\n  //       .catch(err => console.log(err.res));\n  //   }\n\n\n})(UserType);\nexport default FormikUserType;","map":{"version":3,"sources":["/Users/user/Desktop/Lambda/Replate-React/replate-react/src/Components/CreateAccount.js"],"names":["React","useState","useEffect","withFormik","Form","Field","Yup","UserType","values","status","type","setType","businessUser","FormikUserType","mapPropsToValues","volunteerUser"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,KAA3B,QAAwC,QAAxC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAwB;AAAA,oBACfR,QAAQ,CAAC,EAAD,CADO;AAAA;AAAA,QAChCS,IADgC;AAAA,QAC1BC,OAD0B,kBAGvC;;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,MAAJ,EAAY;AACRE,MAAAA,OAAO,CAAC,CAACD,IAAD,EAAOD,MAAP,CAAD,CAAP;AACH;AACF,GAJQ,EAIN,CAACC,IAAD,EAAOD,MAAP,CAJM,CAAT;AAMA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,IAAI,EAAC,eAAzB;AACA,IAAA,QAAQ,EAAEC,IAAI,CAACE,YADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,IAAI,EAAC,cAA5B;AACA,IAAA,OAAO,EAAEF,IAAI,CAACE,YADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CANF,CAFF,CADF,CADF;AAmBD,CA7BD;;AA+BA,MAAMC,cAAc,GAAGV,UAAU,CAAC;AAChCW,EAAAA,gBAAgB,CAAC;AACfC,IAAAA,aADe;AAEfH,IAAAA;AAFe,GAAD,EAGb;AACD,WAAO;AACHG,MAAAA,aAAa,EAAEA,aAAa,IAAI,IAD7B;AAEHH,MAAAA,YAAY,EAAEA,YAAY,IAAI;AAF3B,KAAP;AAID,GAT+B,CAWlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA9BkC,CAAD,CAAV,CA+BpBL,QA/BoB,CAAvB;AAiCA,eAAeM,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\n\n\n// function validatePhone(value){\n//     let error;\n//     if(!value) {\n//         error=\"Required field\";\n//     } else if (!/^[2-9]\\d{2}-\\d{3}-\\d{4}$/i.test(value)) {\n//         error=\"Enter phone in the following format: xxx-xxx-xxxx\";\n//     }\n//     return error;\n// }\n\nconst UserType = ({ values, status }) => {\n  const [type, setType] = useState([]);\n\n  //sets\n  useEffect(() => {\n    if (status) {\n        setType([type, status]);\n    }\n  }, [type, status]);\n\n  return (\n    <div>\n      <Form>\n        <h2>I am a</h2>\n        <div>\n          <div>\n            <label>Volunteer</label>\n            <Field type=\"radio\" name=\"volunteerUser\"\n            selected={type.businessUser}/>\n          </div>\n          <div>\n            <label>Business</label>\n            <Field type=\"checkbox\" name=\"businessUser\"\n            checked={type.businessUser}/>\n          </div>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nconst FormikUserType = withFormik({\n  mapPropsToValues({\n    volunteerUser,\n    businessUser\n  }) {\n    return {\n        volunteerUser: volunteerUser || true,\n        businessUser: businessUser || false,\n    };\n  },\n\n//   validationSchema: Yup.object().shape({\n//     firstName: Yup.string().required(\"*Required field\"),\n//     lastName: Yup.string().required(\"*Required field\"),\n//     phone: Yup.string().required(\"*Required field\"),\n//     email: Yup.string()\n//       .email(\"Invalid email\")\n//       .required(\"*Required field\"),\n//     password: Yup.string().required(\"*Required field\"),\n//     confirmPassword: Yup.string().required(\"*Required field\")\n//   }),\n\n//   handleChange(values, { setStatus }) {\n//     axios\n//       .post(\"https://reqres.in/api/users\", values)\n//       .then(res => {\n//         setStatus(res.data);\n//         console.log(\"VolOnboardForm POST request success:\", res);\n//       })\n//       .catch(err => console.log(err.res));\n//   }\n})(UserType);\n\nexport default FormikUserType;"]},"metadata":{},"sourceType":"module"}