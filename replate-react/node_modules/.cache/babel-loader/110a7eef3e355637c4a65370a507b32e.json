{"ast":null,"code":"import _objectWithoutProperties from \"/Users/user/Desktop/Lambda/Replate-React/replate-react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/user/Desktop/Lambda/Replate-React/replate-react/src/Components/CreateAccount.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport BusOnboardForm from \"./Components/BusinessCreateAccount\";\nimport VolOnboardForm from \"./Components/VolunteerCreateAccount\"; // // Input feedback\n// const InputFeedback = ({ error }) =>\n//   error ? <div className={classNames(\"input-feedback\")}>{error}</div> : null;\n\nconst handleChange = event => {\n  const target = event.currentTarget;\n  let valueArray = [...this.props.value] || [];\n\n  if (target.checked) {\n    // valueArray.push(target.id);\n    return React.createElement(BusOnboardForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    });\n  } else {\n    return React.createElement(VolOnboardForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }); // valueArray.splice(valueArray.indexOf(target.id), 1);\n  } // this.props.onChange(this.props.id, valueArray);\n\n}; // Radio input\n\n\nconst RadioButton = (_ref) => {\n  let _ref$field = _ref.field,\n      name = _ref$field.name,\n      value = _ref$field.value,\n      onChange = _ref$field.onChange,\n      id = _ref.id,\n      label = _ref.label,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, [\"field\", \"id\", \"label\", \"className\"]);\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({\n    name: name,\n    id: id,\n    type: \"radio\",\n    value: id // could be something else for output?\n    ,\n    checked: id === value,\n    onChange: onChange // onBlur={onBlur}\n    // className={classNames(\"radio-button\")}\n\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    htmlFor: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, label));\n}; // Radio group\n\n\nconst RadioButtonGroup = ({\n  value,\n  error,\n  touched,\n  id,\n  label,\n  className,\n  children\n}) => {\n  // const classes = classNames(\n  //   \"input-field\",\n  //   {\n  //     \"is-success\": value || (!error && touched), // handle prefilled or user-filled\n  //     \"is-error\": !!error && touched\n  //   },\n  //   className\n  // );\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, children));\n};\n\nconst UserType = () => React.createElement(\"div\", {\n  className: \"app\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 87\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 88\n  },\n  __self: this\n}, \"I am a...\"), React.createElement(Formik, {\n  initialValues: {\n    radioGroup: \"\"\n  },\n  validationSchema: Yup.object().shape({\n    radioGroup: Yup.string().required(\"A radio option is required\")\n  }),\n  onSubmit: (values, actions) => {\n    setTimeout(() => {\n      console.log(JSON.stringify(values, null, 2));\n      actions.setSubmitting(false);\n    }, 500);\n  },\n  render: ({\n    handleSubmit,\n    setFieldValue,\n    setFieldTouched,\n    values,\n    errors,\n    touched,\n    isSubmitting\n  }) => React.createElement(\"form\", {\n    handleChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Radio group\"), React.createElement(RadioButtonGroup, {\n    id: \"radioGroup\",\n    label: \"One of these please\",\n    value: values.radioGroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(Field, {\n    component: RadioButton,\n    name: \"radioGroup\",\n    id: \"radioOption1\",\n    label: \"Volunteer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), React.createElement(Field, {\n    component: RadioButton,\n    name: \"radioGroup\",\n    id: \"radioOption2\",\n    label: \"Business\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }))),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 89\n  },\n  __self: this\n})); // const UserType = ({ values, status }) => {\n//   const [type, setType] = useState([]);\n//   //sets\n//   useEffect(() => {\n//     if (status) {\n//         setType([type, status]);\n//     }\n//   }, [type, status]);\n//   return (\n//     <div>\n//       <Form>\n//         <h2>I am a</h2>\n//         <div>\n//           <div>\n//             <label>Volunteer</label>\n//             <Field type=\"radio\" name=\"volunteerUser\"\n//             selected={type.businessUser}/>\n//           </div>\n//           <div>\n//             <label>Business</label>\n//             <Field type=\"checkbox\" name=\"businessUser\"\n//             checked={type.businessUser}/>\n//           </div>\n//         </div>\n//       </Form>\n//     </div>\n//   );\n// };\n// const FormikUserType = withFormik({\n//   mapPropsToValues({\n//     volunteerUser,\n//     businessUser\n//   }) {\n//     return {\n//         volunteerUser: volunteerUser || true,\n//         businessUser: businessUser || false,\n//     };\n//   },\n// //   validationSchema: Yup.object().shape({\n// //     firstName: Yup.string().required(\"*Required field\"),\n// //     lastName: Yup.string().required(\"*Required field\"),\n// //     phone: Yup.string().required(\"*Required field\"),\n// //     email: Yup.string()\n// //       .email(\"Invalid email\")\n// //       .required(\"*Required field\"),\n// //     password: Yup.string().required(\"*Required field\"),\n// //     confirmPassword: Yup.string().required(\"*Required field\")\n// //   }),\n// //   handleChange(values, { setStatus }) {\n// //     axios\n// //       .post(\"https://reqres.in/api/users\", values)\n// //       .then(res => {\n// //         setStatus(res.data);\n// //         console.log(\"VolOnboardForm POST request success:\", res);\n// //       })\n// //       .catch(err => console.log(err.res));\n// //   }\n// })(UserType);\n\n\nexport default VolOnboardForm;","map":{"version":3,"sources":["/Users/user/Desktop/Lambda/Replate-React/replate-react/src/Components/CreateAccount.js"],"names":["React","useState","useEffect","Formik","Field","Yup","BusOnboardForm","VolOnboardForm","handleChange","event","target","currentTarget","valueArray","props","value","checked","RadioButton","field","name","onChange","id","label","className","RadioButtonGroup","error","touched","children","UserType","radioGroup","object","shape","string","required","values","actions","setTimeout","console","log","JSON","stringify","setSubmitting","handleSubmit","setFieldValue","setFieldTouched","errors","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport BusOnboardForm from \"./Components/BusinessCreateAccount\";\nimport VolOnboardForm from \"./Components/VolunteerCreateAccount\"\n\n\n// // Input feedback\n// const InputFeedback = ({ error }) =>\n//   error ? <div className={classNames(\"input-feedback\")}>{error}</div> : null;\n\nconst handleChange = event => {\n  const target = event.currentTarget;\n  let valueArray = [...this.props.value] || [];\n\n  if (target.checked) {\n    // valueArray.push(target.id);\n    return(\n      <BusOnboardForm/>\n    )\n  } else {\n    return <VolOnboardForm/>\n    // valueArray.splice(valueArray.indexOf(target.id), 1);\n  }\n\n  // this.props.onChange(this.props.id, valueArray);\n};\n\n// Radio input\nconst RadioButton = ({\n  field: { name, value, onChange },\n  id,\n  label,\n  className,\n  ...props\n}) => {\n  return (\n    <div>\n      <input\n        name={name}\n        id={id}\n        type=\"radio\"\n        value={id} // could be something else for output?\n        checked={id === value}\n        onChange={onChange}\n        // onBlur={onBlur}\n        // className={classNames(\"radio-button\")}\n        {...props}\n      />\n      <label htmlFor={id}>{label}</label>\n    </div>\n  );\n};\n\n// Radio group\nconst RadioButtonGroup = ({\n  value,\n  error,\n  touched,\n  id,\n  label,\n  className,\n  children\n}) => {\n  // const classes = classNames(\n  //   \"input-field\",\n  //   {\n  //     \"is-success\": value || (!error && touched), // handle prefilled or user-filled\n  //     \"is-error\": !!error && touched\n  //   },\n  //   className\n  // );\n\n  return (\n    <div>\n      <fieldset>\n        {/* <legend>{label}</legend> */}\n        {children}\n        {/* {touched && <InputFeedback error={error} />} */}\n      </fieldset>\n    </div>\n  );\n};\n\nconst UserType = () => (\n  <div className=\"app\">\n    <h1>I am a...</h1>\n    <Formik\n      initialValues={{\n        radioGroup: \"\",\n      }}\n      validationSchema={Yup.object().shape({\n        radioGroup: Yup.string().required(\"A radio option is required\"),\n      })}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 500);\n      }}\n      render={({\n        handleSubmit,\n        setFieldValue,\n        setFieldTouched,\n        values,\n        errors,\n        touched,\n        isSubmitting\n      }) => (\n        <form handleChange={handleChange}>\n         \n\n          <h2>Radio group</h2>\n          <RadioButtonGroup\n            id=\"radioGroup\"\n            label=\"One of these please\"\n            value={values.radioGroup}\n          >\n            <Field\n              component={RadioButton}\n              name=\"radioGroup\"\n              id=\"radioOption1\"\n              label=\"Volunteer\"\n            />\n            <Field\n              component={RadioButton}\n              name=\"radioGroup\"\n              id=\"radioOption2\"\n              label=\"Business\"\n            />\n          </RadioButtonGroup>\n        </form>\n      )}\n    />\n  </div>\n);\n\n\n\n\n// const UserType = ({ values, status }) => {\n//   const [type, setType] = useState([]);\n\n//   //sets\n//   useEffect(() => {\n//     if (status) {\n//         setType([type, status]);\n//     }\n//   }, [type, status]);\n\n//   return (\n//     <div>\n//       <Form>\n//         <h2>I am a</h2>\n//         <div>\n//           <div>\n//             <label>Volunteer</label>\n//             <Field type=\"radio\" name=\"volunteerUser\"\n//             selected={type.businessUser}/>\n//           </div>\n//           <div>\n//             <label>Business</label>\n//             <Field type=\"checkbox\" name=\"businessUser\"\n//             checked={type.businessUser}/>\n//           </div>\n//         </div>\n//       </Form>\n//     </div>\n//   );\n// };\n\n// const FormikUserType = withFormik({\n//   mapPropsToValues({\n//     volunteerUser,\n//     businessUser\n//   }) {\n//     return {\n//         volunteerUser: volunteerUser || true,\n//         businessUser: businessUser || false,\n//     };\n//   },\n\n// //   validationSchema: Yup.object().shape({\n// //     firstName: Yup.string().required(\"*Required field\"),\n// //     lastName: Yup.string().required(\"*Required field\"),\n// //     phone: Yup.string().required(\"*Required field\"),\n// //     email: Yup.string()\n// //       .email(\"Invalid email\")\n// //       .required(\"*Required field\"),\n// //     password: Yup.string().required(\"*Required field\"),\n// //     confirmPassword: Yup.string().required(\"*Required field\")\n// //   }),\n\n// //   handleChange(values, { setStatus }) {\n// //     axios\n// //       .post(\"https://reqres.in/api/users\", values)\n// //       .then(res => {\n// //         setStatus(res.data);\n// //         console.log(\"VolOnboardForm POST request success:\", res);\n// //       })\n// //       .catch(err => console.log(err.res));\n// //   }\n// })(UserType);\n\nexport default VolOnboardForm;"]},"metadata":{},"sourceType":"module"}