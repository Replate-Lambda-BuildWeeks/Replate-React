{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { Formik, Field } from \"formik\";\n// import * as Yup from \"yup\";\n// import BusOnboardForm from \"./BusinessCreateAccount\";\n// import VolOnboardForm from \"./VolunteerCreateAccount\"\n// // // Input feedback\n// // const InputFeedback = ({ error }) =>\n// //   error ? <div className={classNames(\"input-feedback\")}>{error}</div> : null;\n// const handleChange = event => {\n//   const target = event.currentTarget;\n//   let valueArray = [...this.props.value] || [];\n//   if (target.checked) {\n//     // valueArray.push(target.id);\n//     return(\n//       <BusOnboardForm/>\n//     )\n//   } else {\n//     return <VolOnboardForm/>\n//     // valueArray.splice(valueArray.indexOf(target.id), 1);\n//   }\n//   // this.props.onChange(this.props.id, valueArray);\n// };\n// // Radio input\n// const RadioButton = ({\n//   field: { name, value, onChange },\n//   id,\n//   label,\n//   className,\n//   ...props\n// }) => {\n//   return (\n//     <div>\n//       <input\n//         name={name}\n//         id={id}\n//         type=\"radio\"\n//         value={id} // could be something else for output?\n//         checked={id === value}\n//         onChange={onChange}\n//         // onBlur={onBlur}\n//         // className={classNames(\"radio-button\")}\n//         {...props}\n//       />\n//       <label htmlFor={id}>{label}</label>\n//     </div>\n//   );\n// };\n// // Radio group\n// const RadioButtonGroup = ({\n//   value,\n//   error,\n//   touched,\n//   id,\n//   label,\n//   className,\n//   children\n// }) => {\n//   // const classes = classNames(\n//   //   \"input-field\",\n//   //   {\n//   //     \"is-success\": value || (!error && touched), // handle prefilled or user-filled\n//   //     \"is-error\": !!error && touched\n//   //   },\n//   //   className\n//   // );\n//   return (\n//     <div>\n//       <fieldset>\n//         {/* <legend>{label}</legend> */}\n//         {children}\n//         {/* {touched && <InputFeedback error={error} />} */}\n//       </fieldset>\n//     </div>\n//   );\n// };\n// const UserType = () => (\n//   <div className=\"app\">\n//     <h1>I am a...</h1>\n//     <Formik\n//       initialValues={{\n//         radioGroup: \"\",\n//       }}\n//       validationSchema={Yup.object().shape({\n//         radioGroup: Yup.string().required(\"A radio option is required\"),\n//       })}\n//       onSubmit={(values, actions) => {\n//         setTimeout(() => {\n//           console.log(JSON.stringify(values, null, 2));\n//           actions.setSubmitting(false);\n//         }, 500);\n//       }}\n//       render={({\n//         handleSubmit,\n//         setFieldValue,\n//         setFieldTouched,\n//         values,\n//         errors,\n//         touched,\n//         isSubmitting\n//       }) => (\n//         <form handleChange={handleChange}>\n//           <h2>Radio group</h2>\n//           <RadioButtonGroup\n//             id=\"radioGroup\"\n//             label=\"One of these please\"\n//             value={values.radioGroup}\n//           >\n//             <Field\n//               component={RadioButton}\n//               name=\"radioGroup\"\n//               id=\"radioOption1\"\n//               label=\"Volunteer\"\n//             />\n//             <Field\n//               component={RadioButton}\n//               name=\"radioGroup\"\n//               id=\"radioOption2\"\n//               label=\"Business\"\n//             />\n//           </RadioButtonGroup>\n//         </form>\n//       )}\n//     />\n//   </div>\n// );\n// handleChange();\n// export default UserType;\n// // const UserType = ({ values, status }) => {\n// //   const [type, setType] = useState([]);\n// //   //sets\n// //   useEffect(() => {\n// //     if (status) {\n// //         setType([type, status]);\n// //     }\n// //   }, [type, status]);\n// //   return (\n// //     <div>\n// //       <Form>\n// //         <h2>I am a</h2>\n// //         <div>\n// //           <div>\n// //             <label>Volunteer</label>\n// //             <Field type=\"radio\" name=\"volunteerUser\"\n// //             selected={type.businessUser}/>\n// //           </div>\n// //           <div>\n// //             <label>Business</label>\n// //             <Field type=\"checkbox\" name=\"businessUser\"\n// //             checked={type.businessUser}/>\n// //           </div>\n// //         </div>\n// //       </Form>\n// //     </div>\n// //   );\n// // };\n// // const FormikUserType = withFormik({\n// //   mapPropsToValues({\n// //     volunteerUser,\n// //     businessUser\n// //   }) {\n// //     return {\n// //         volunteerUser: volunteerUser || true,\n// //         businessUser: businessUser || false,\n// //     };\n// //   },\n// // //   validationSchema: Yup.object().shape({\n// // //     firstName: Yup.string().required(\"*Required field\"),\n// // //     lastName: Yup.string().required(\"*Required field\"),\n// // //     phone: Yup.string().required(\"*Required field\"),\n// // //     email: Yup.string()\n// // //       .email(\"Invalid email\")\n// // //       .required(\"*Required field\"),\n// // //     password: Yup.string().required(\"*Required field\"),\n// // //     confirmPassword: Yup.string().required(\"*Required field\")\n// // //   }),\n// // //   handleChange(values, { setStatus }) {\n// // //     axios\n// // //       .post(\"https://reqres.in/api/users\", values)\n// // //       .then(res => {\n// // //         setStatus(res.data);\n// // //         console.log(\"VolOnboardForm POST request success:\", res);\n// // //       })\n// // //       .catch(err => console.log(err.res));\n// // //   }\n// // })(UserType);","map":{"version":3,"sources":["/Users/user/Desktop/Lambda/Replate-React/replate-react/src/Components/CreateAccount.js"],"names":[],"mappingssourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { Formik, Field } from \"formik\";\n// import * as Yup from \"yup\";\n\n// import BusOnboardForm from \"./BusinessCreateAccount\";\n// import VolOnboardForm from \"./VolunteerCreateAccount\"\n\n\n// // // Input feedback\n// // const InputFeedback = ({ error }) =>\n// //   error ? <div className={classNames(\"input-feedback\")}>{error}</div> : null;\n\n// const handleChange = event => {\n//   const target = event.currentTarget;\n//   let valueArray = [...this.props.value] || [];\n\n//   if (target.checked) {\n//     // valueArray.push(target.id);\n//     return(\n//       <BusOnboardForm/>\n//     )\n//   } else {\n//     return <VolOnboardForm/>\n//     // valueArray.splice(valueArray.indexOf(target.id), 1);\n//   }\n\n//   // this.props.onChange(this.props.id, valueArray);\n// };\n\n// // Radio input\n// const RadioButton = ({\n//   field: { name, value, onChange },\n//   id,\n//   label,\n//   className,\n//   ...props\n// }) => {\n//   return (\n//     <div>\n//       <input\n//         name={name}\n//         id={id}\n//         type=\"radio\"\n//         value={id} // could be something else for output?\n//         checked={id === value}\n//         onChange={onChange}\n//         // onBlur={onBlur}\n//         // className={classNames(\"radio-button\")}\n//         {...props}\n//       />\n//       <label htmlFor={id}>{label}</label>\n//     </div>\n//   );\n// };\n\n// // Radio group\n// const RadioButtonGroup = ({\n//   value,\n//   error,\n//   touched,\n//   id,\n//   label,\n//   className,\n//   children\n// }) => {\n//   // const classes = classNames(\n//   //   \"input-field\",\n//   //   {\n//   //     \"is-success\": value || (!error && touched), // handle prefilled or user-filled\n//   //     \"is-error\": !!error && touched\n//   //   },\n//   //   className\n//   // );\n\n//   return (\n//     <div>\n//       <fieldset>\n//         {/* <legend>{label}</legend> */}\n//         {children}\n//         {/* {touched && <InputFeedback error={error} />} */}\n//       </fieldset>\n//     </div>\n//   );\n// };\n\n// const UserType = () => (\n//   <div className=\"app\">\n//     <h1>I am a...</h1>\n//     <Formik\n//       initialValues={{\n//         radioGroup: \"\",\n//       }}\n//       validationSchema={Yup.object().shape({\n//         radioGroup: Yup.string().required(\"A radio option is required\"),\n//       })}\n//       onSubmit={(values, actions) => {\n//         setTimeout(() => {\n//           console.log(JSON.stringify(values, null, 2));\n//           actions.setSubmitting(false);\n//         }, 500);\n//       }}\n//       render={({\n//         handleSubmit,\n//         setFieldValue,\n//         setFieldTouched,\n//         values,\n//         errors,\n//         touched,\n//         isSubmitting\n//       }) => (\n//         <form handleChange={handleChange}>\n         \n\n//           <h2>Radio group</h2>\n//           <RadioButtonGroup\n//             id=\"radioGroup\"\n//             label=\"One of these please\"\n//             value={values.radioGroup}\n//           >\n//             <Field\n//               component={RadioButton}\n//               name=\"radioGroup\"\n//               id=\"radioOption1\"\n//               label=\"Volunteer\"\n//             />\n//             <Field\n//               component={RadioButton}\n//               name=\"radioGroup\"\n//               id=\"radioOption2\"\n//               label=\"Business\"\n//             />\n//           </RadioButtonGroup>\n//         </form>\n//       )}\n//     />\n//   </div>\n// );\n// handleChange();\n\n// export default UserType;\n\n\n\n\n// // const UserType = ({ values, status }) => {\n// //   const [type, setType] = useState([]);\n\n// //   //sets\n// //   useEffect(() => {\n// //     if (status) {\n// //         setType([type, status]);\n// //     }\n// //   }, [type, status]);\n\n// //   return (\n// //     <div>\n// //       <Form>\n// //         <h2>I am a</h2>\n// //         <div>\n// //           <div>\n// //             <label>Volunteer</label>\n// //             <Field type=\"radio\" name=\"volunteerUser\"\n// //             selected={type.businessUser}/>\n// //           </div>\n// //           <div>\n// //             <label>Business</label>\n// //             <Field type=\"checkbox\" name=\"businessUser\"\n// //             checked={type.businessUser}/>\n// //           </div>\n// //         </div>\n// //       </Form>\n// //     </div>\n// //   );\n// // };\n\n// // const FormikUserType = withFormik({\n// //   mapPropsToValues({\n// //     volunteerUser,\n// //     businessUser\n// //   }) {\n// //     return {\n// //         volunteerUser: volunteerUser || true,\n// //         businessUser: businessUser || false,\n// //     };\n// //   },\n\n// // //   validationSchema: Yup.object().shape({\n// // //     firstName: Yup.string().required(\"*Required field\"),\n// // //     lastName: Yup.string().required(\"*Required field\"),\n// // //     phone: Yup.string().required(\"*Required field\"),\n// // //     email: Yup.string()\n// // //       .email(\"Invalid email\")\n// // //       .required(\"*Required field\"),\n// // //     password: Yup.string().required(\"*Required field\"),\n// // //     confirmPassword: Yup.string().required(\"*Required field\")\n// // //   }),\n\n// // //   handleChange(values, { setStatus }) {\n// // //     axios\n// // //       .post(\"https://reqres.in/api/users\", values)\n// // //       .then(res => {\n// // //         setStatus(res.data);\n// // //         console.log(\"VolOnboardForm POST request success:\", res);\n// // //       })\n// // //       .catch(err => console.log(err.res));\n// // //   }\n// // })(UserType);\n\n"]},"metadata":{},"sourceType":"module"}